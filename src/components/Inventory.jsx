"use client"

import { useState } from "react"

const Inventory = ({ items, onAddIngredient, onRemoveIngredient }) => {
  const [showAddModal, setShowAddModal] = useState(false)
  const [newIngredient, setNewIngredient] = useState({
    name: "",
    category: "",
    unit: "",
    stock: 0,
    price: 0,
  })

  const categories = [
    "–ú—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è",
    "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ",
    "–û–≤–æ—â–∏",
    "–°–æ—É—Å—ã",
    "–ú–∞—Å–ª–∞",
    "–°–ø–µ—Ü–∏–∏",
    "–£–ø–∞–∫–æ–≤–∫–∞",
  ]

  const units = ["–∫–≥", "–ª", "—à—Ç", "–º", "–≥"]

  const handleSubmit = (e) => {
    e.preventDefault()
    if (newIngredient.name && newIngredient.category && newIngredient.unit) {
      onAddIngredient(newIngredient)
      setNewIngredient({ name: "", category: "", unit: "", stock: 0, price: 0 })
      setShowAddModal(false)
    }
  }

  const handleDelete = (id) => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?")) {
      onRemoveIngredient(id)
    }
  }

  const formatPrice = (price) => {
    return new Intl.NumberFormat("ru-RU").format(price) + " —Å—É–º"
  }

  const getCategoryBadgeColor = (category) => {
    const colors = {
      "–ú—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è": "#ff6b35",
      "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": "#4ecdc4",
      –•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ: "#f39c12",
      –û–≤–æ—â–∏: "#27ae60",
      –°–æ—É—Å—ã: "#e74c3c",
      –ú–∞—Å–ª–∞: "#f1c40f",
      –°–ø–µ—Ü–∏–∏: "#9b59b6",
      –£–ø–∞–∫–æ–≤–∫–∞: "#95a5a6",
    }
    return colors[category] || "#6c757d"
  }

  return (
    <section className="inventory-section">
      <div className="inventory-header">
        <h2 className="inventory-title">–°–∫–ª–∞–¥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤</h2>
        <button className="add-ingredient-btn" onClick={() => setShowAddModal(true)}>
          + –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        </button>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ */}
      {showAddModal && (
        <div className="modal-overlay" onClick={() => setShowAddModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä</h3>
              <button className="modal-close-btn" onClick={() => setShowAddModal(false)}>
                √ó
              </button>
            </div>

            <form onSubmit={handleSubmit} className="add-ingredient-form">
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
                <input
                  type="text"
                  value={newIngredient.name}
                  onChange={(e) => setNewIngredient({ ...newIngredient, name: e.target.value })}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                  required
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <select
                    value={newIngredient.category}
                    onChange={(e) => setNewIngredient({ ...newIngredient, category: e.target.value })}
                    required
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                    {categories.map((cat) => (
                      <option key={cat} value={cat}>
                        {cat}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="form-group">
                  <label>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
                  <select
                    value={newIngredient.unit}
                    onChange={(e) => setNewIngredient({ ...newIngredient, unit: e.target.value })}
                    required
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É</option>
                    {units.map((unit) => (
                      <option key={unit} value={unit}>
                        {unit}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                  <input
                    type="number"
                    min="0"
                    value={newIngredient.stock}
                    onChange={(e) =>
                      setNewIngredient({ ...newIngredient, stock: Number.parseInt(e.target.value) || 0 })
                    }
                    placeholder="0"
                  />
                </div>

                <div className="form-group">
                  <label>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (—Å—É–º)</label>
                  <input
                    type="number"
                    min="0"
                    value={newIngredient.price}
                    onChange={(e) =>
                      setNewIngredient({ ...newIngredient, price: Number.parseInt(e.target.value) || 0 })
                    }
                    placeholder="0"
                  />
                </div>
              </div>

              <div className="form-actions">
                <button type="submit" className="submit-btn">
                  –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                </button>
                <button type="button" className="cancel-btn" onClick={() => setShowAddModal(false)}>
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      <div className="inventory-table-container">
        <table className="inventory-table">
          <thead>
            <tr>
              <th>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</th>
              <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
              <th>–ï–¥–∏–Ω–∏—Ü–∞</th>
              <th>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É</th>
              <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {items.map((item) => (
              <tr key={item.id} className={item.stock <= 5 ? "low-stock-row" : ""}>
                <td className="item-name">{item.name}</td>
                <td>
                  <span className="category-badge" style={{ backgroundColor: getCategoryBadgeColor(item.category) }}>
                    {item.category}
                  </span>
                </td>
                <td className="item-unit">{item.unit}</td>
                <td className="item-price">{formatPrice(item.price)}</td>
                <td className="item-stock">
                  {item.stock} {item.unit}
                </td>
                <td>
                  <span
                    className={`status-badge ${
                      item.stock === 0 ? "out-of-stock" : item.stock <= 5 ? "low-stock" : "in-stock"
                    }`}
                  >
                    {item.stock === 0 ? "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" : item.stock <= 5 ? "–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è" : "–í –Ω–∞–ª–∏—á–∏–∏"}
                  </span>
                </td>
                <td>
                  <button className="delete-btn" onClick={() => handleDelete(item.id)} title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä">
                    üóëÔ∏è
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </section>
  )
}

export default Inventory
